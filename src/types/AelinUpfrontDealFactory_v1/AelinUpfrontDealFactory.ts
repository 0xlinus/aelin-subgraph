// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts'

export class AcceptDeal extends ethereum.Event {
  get params(): AcceptDeal__Params {
    return new AcceptDeal__Params(this)
  }
}

export class AcceptDeal__Params {
  _event: AcceptDeal

  constructor(event: AcceptDeal) {
    this._event = event
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get amountPurchased(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get totalPurchased(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get amountDealTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get totalDealTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }
}

export class ClaimDealTokens extends ethereum.Event {
  get params(): ClaimDealTokens__Params {
    return new ClaimDealTokens__Params(this)
  }
}

export class ClaimDealTokens__Params {
  _event: ClaimDealTokens

  constructor(event: ClaimDealTokens) {
    this._event = event
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get amountMinted(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get amountPurchasingReturned(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class ClaimedUnderlyingDealToken extends ethereum.Event {
  get params(): ClaimedUnderlyingDealToken__Params {
    return new ClaimedUnderlyingDealToken__Params(this)
  }
}

export class ClaimedUnderlyingDealToken__Params {
  _event: ClaimedUnderlyingDealToken

  constructor(event: ClaimedUnderlyingDealToken) {
    this._event = event
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get underlyingToken(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get amountClaimed(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class CreateUpFrontDeal extends ethereum.Event {
  get params(): CreateUpFrontDeal__Params {
    return new CreateUpFrontDeal__Params(this)
  }
}

export class CreateUpFrontDeal__Params {
  _event: CreateUpFrontDeal

  constructor(event: CreateUpFrontDeal) {
    this._event = event
  }

  get dealAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get name(): string {
    return this._event.parameters[1].value.toString()
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString()
  }

  get purchaseToken(): Address {
    return this._event.parameters[3].value.toAddress()
  }

  get underlyingDealToken(): Address {
    return this._event.parameters[4].value.toAddress()
  }

  get holder(): Address {
    return this._event.parameters[5].value.toAddress()
  }

  get sponsor(): Address {
    return this._event.parameters[6].value.toAddress()
  }

  get sponsorFee(): BigInt {
    return this._event.parameters[7].value.toBigInt()
  }
}

export class CreateUpFrontDealConfig extends ethereum.Event {
  get params(): CreateUpFrontDealConfig__Params {
    return new CreateUpFrontDealConfig__Params(this)
  }
}

export class CreateUpFrontDealConfig__Params {
  _event: CreateUpFrontDealConfig

  constructor(event: CreateUpFrontDealConfig) {
    this._event = event
  }

  get dealAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get underlyingDealTokenTotal(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get purchaseTokenPerDealToken(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get purchaseRaiseMinimum(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get purchaseDuration(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }

  get vestingPeriod(): BigInt {
    return this._event.parameters[5].value.toBigInt()
  }

  get vestingCliffPeriod(): BigInt {
    return this._event.parameters[6].value.toBigInt()
  }

  get allowDeallocation(): boolean {
    return this._event.parameters[7].value.toBoolean()
  }
}

export class DealFullyFunded extends ethereum.Event {
  get params(): DealFullyFunded__Params {
    return new DealFullyFunded__Params(this)
  }
}

export class DealFullyFunded__Params {
  _event: DealFullyFunded

  constructor(event: DealFullyFunded) {
    this._event = event
  }

  get upFrontDealAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get purchaseExpiryTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get vestingCliffExpiryTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get vestingExpiryTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }
}

export class DepositDealToken extends ethereum.Event {
  get params(): DepositDealToken__Params {
    return new DepositDealToken__Params(this)
  }
}

export class DepositDealToken__Params {
  _event: DepositDealToken

  constructor(event: DepositDealToken) {
    this._event = event
  }

  get underlyingDealTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get depositor(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get underlyingDealTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class Disavow extends ethereum.Event {
  get params(): Disavow__Params {
    return new Disavow__Params(this)
  }
}

export class Disavow__Params {
  _event: Disavow

  constructor(event: Disavow) {
    this._event = event
  }

  get voucher(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class FeeEscrowClaim extends ethereum.Event {
  get params(): FeeEscrowClaim__Params {
    return new FeeEscrowClaim__Params(this)
  }
}

export class FeeEscrowClaim__Params {
  _event: FeeEscrowClaim

  constructor(event: FeeEscrowClaim) {
    this._event = event
  }

  get aelinFeeEscrow(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get underlyingTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class HolderClaim extends ethereum.Event {
  get params(): HolderClaim__Params {
    return new HolderClaim__Params(this)
  }
}

export class HolderClaim__Params {
  _event: HolderClaim

  constructor(event: HolderClaim) {
    this._event = event
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get purchaseToken(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get amountClaimed(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get underlyingToken(): Address {
    return this._event.parameters[3].value.toAddress()
  }

  get underlyingRefund(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt()
  }
}

export class PoolWith1155 extends ethereum.Event {
  get params(): PoolWith1155__Params {
    return new PoolWith1155__Params(this)
  }
}

export class PoolWith1155__Params {
  _event: PoolWith1155

  constructor(event: PoolWith1155) {
    this._event = event
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get purchaseAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get purchaseAmountPerToken(): boolean {
    return this._event.parameters[2].value.toBoolean()
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray()
  }

  get minTokensEligible(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray()
  }
}

export class PoolWith721 extends ethereum.Event {
  get params(): PoolWith721__Params {
    return new PoolWith721__Params(this)
  }
}

export class PoolWith721__Params {
  _event: PoolWith721

  constructor(event: PoolWith721) {
    this._event = event
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get purchaseAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get purchaseAmountPerToken(): boolean {
    return this._event.parameters[2].value.toBoolean()
  }
}

export class SetHolder extends ethereum.Event {
  get params(): SetHolder__Params {
    return new SetHolder__Params(this)
  }
}

export class SetHolder__Params {
  _event: SetHolder

  constructor(event: SetHolder) {
    this._event = event
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class SponsorClaim extends ethereum.Event {
  get params(): SponsorClaim__Params {
    return new SponsorClaim__Params(this)
  }
}

export class SponsorClaim__Params {
  _event: SponsorClaim

  constructor(event: SponsorClaim) {
    this._event = event
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get amountMinted(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class Vouch extends ethereum.Event {
  get params(): Vouch__Params {
    return new Vouch__Params(this)
  }
}

export class Vouch__Params {
  _event: Vouch

  constructor(event: Vouch) {
    this._event = event
  }

  get voucher(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class WithdrewExcess extends ethereum.Event {
  get params(): WithdrewExcess__Params {
    return new WithdrewExcess__Params(this)
  }
}

export class WithdrewExcess__Params {
  _event: WithdrewExcess

  constructor(event: WithdrewExcess) {
    this._event = event
  }

  get UpFrontDealAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get amountWithdrawn(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class AelinUpfrontDealFactory__createUpFrontDealInput_dealDataStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString()
  }

  get symbol(): string {
    return this[1].toString()
  }

  get purchaseToken(): Address {
    return this[2].toAddress()
  }

  get underlyingDealToken(): Address {
    return this[3].toAddress()
  }

  get holder(): Address {
    return this[4].toAddress()
  }

  get sponsor(): Address {
    return this[5].toAddress()
  }

  get sponsorFee(): BigInt {
    return this[6].toBigInt()
  }
}

export class AelinUpfrontDealFactory__createUpFrontDealInput_dealConfigStruct extends ethereum.Tuple {
  get underlyingDealTokenTotal(): BigInt {
    return this[0].toBigInt()
  }

  get purchaseTokenPerDealToken(): BigInt {
    return this[1].toBigInt()
  }

  get purchaseRaiseMinimum(): BigInt {
    return this[2].toBigInt()
  }

  get purchaseDuration(): BigInt {
    return this[3].toBigInt()
  }

  get vestingPeriod(): BigInt {
    return this[4].toBigInt()
  }

  get vestingCliffPeriod(): BigInt {
    return this[5].toBigInt()
  }

  get allowDeallocation(): boolean {
    return this[6].toBoolean()
  }
}

export class AelinUpfrontDealFactory__createUpFrontDealInput_nftCollectionRulesStruct extends ethereum.Tuple {
  get purchaseAmount(): BigInt {
    return this[0].toBigInt()
  }

  get collectionAddress(): Address {
    return this[1].toAddress()
  }

  get purchaseAmountPerToken(): boolean {
    return this[2].toBoolean()
  }

  get tokenIds(): Array<BigInt> {
    return this[3].toBigIntArray()
  }

  get minTokensEligible(): Array<BigInt> {
    return this[4].toBigIntArray()
  }
}

export class AelinUpfrontDealFactory__createUpFrontDealInput_allowListInitStruct extends ethereum.Tuple {
  get allowListAddresses(): Array<Address> {
    return this[0].toAddressArray()
  }

  get allowListAmounts(): Array<BigInt> {
    return this[1].toBigIntArray()
  }
}

export class AelinUpfrontDealFactory extends ethereum.SmartContract {
  static bind(address: Address): AelinUpfrontDealFactory {
    return new AelinUpfrontDealFactory('AelinUpfrontDealFactory', address)
  }

  AELIN_ESCROW_LOGIC(): Address {
    let result = super.call('AELIN_ESCROW_LOGIC', 'AELIN_ESCROW_LOGIC():(address)', [])

    return result[0].toAddress()
  }

  try_AELIN_ESCROW_LOGIC(): ethereum.CallResult<Address> {
    let result = super.tryCall('AELIN_ESCROW_LOGIC', 'AELIN_ESCROW_LOGIC():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  AELIN_TREASURY(): Address {
    let result = super.call('AELIN_TREASURY', 'AELIN_TREASURY():(address)', [])

    return result[0].toAddress()
  }

  try_AELIN_TREASURY(): ethereum.CallResult<Address> {
    let result = super.tryCall('AELIN_TREASURY', 'AELIN_TREASURY():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  UP_FRONT_DEAL_LOGIC(): Address {
    let result = super.call('UP_FRONT_DEAL_LOGIC', 'UP_FRONT_DEAL_LOGIC():(address)', [])

    return result[0].toAddress()
  }

  try_UP_FRONT_DEAL_LOGIC(): ethereum.CallResult<Address> {
    let result = super.tryCall('UP_FRONT_DEAL_LOGIC', 'UP_FRONT_DEAL_LOGIC():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  createUpFrontDeal(
    _dealData: AelinUpfrontDealFactory__createUpFrontDealInput_dealDataStruct,
    _dealConfig: AelinUpfrontDealFactory__createUpFrontDealInput_dealConfigStruct,
    _nftCollectionRules: Array<AelinUpfrontDealFactory__createUpFrontDealInput_nftCollectionRulesStruct>,
    _allowListInit: AelinUpfrontDealFactory__createUpFrontDealInput_allowListInitStruct,
    _depositUnderlyingAmount: BigInt,
  ): Address {
    let result = super.call(
      'createUpFrontDeal',
      'createUpFrontDeal((string,string,address,address,address,address,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,bool),(uint256,address,bool,uint256[],uint256[])[],(address[],uint256[]),uint256):(address)',
      [
        ethereum.Value.fromTuple(_dealData),
        ethereum.Value.fromTuple(_dealConfig),
        ethereum.Value.fromTupleArray(_nftCollectionRules),
        ethereum.Value.fromTuple(_allowListInit),
        ethereum.Value.fromUnsignedBigInt(_depositUnderlyingAmount),
      ],
    )

    return result[0].toAddress()
  }

  try_createUpFrontDeal(
    _dealData: AelinUpfrontDealFactory__createUpFrontDealInput_dealDataStruct,
    _dealConfig: AelinUpfrontDealFactory__createUpFrontDealInput_dealConfigStruct,
    _nftCollectionRules: Array<AelinUpfrontDealFactory__createUpFrontDealInput_nftCollectionRulesStruct>,
    _allowListInit: AelinUpfrontDealFactory__createUpFrontDealInput_allowListInitStruct,
    _depositUnderlyingAmount: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'createUpFrontDeal',
      'createUpFrontDeal((string,string,address,address,address,address,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,bool),(uint256,address,bool,uint256[],uint256[])[],(address[],uint256[]),uint256):(address)',
      [
        ethereum.Value.fromTuple(_dealData),
        ethereum.Value.fromTuple(_dealConfig),
        ethereum.Value.fromTupleArray(_nftCollectionRules),
        ethereum.Value.fromTuple(_allowListInit),
        ethereum.Value.fromUnsignedBigInt(_depositUnderlyingAmount),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this)
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this)
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }

  get _aelinUpFrontDeal(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get _aelinEscrow(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get _aelinTreasury(): Address {
    return this._call.inputValues[2].value.toAddress()
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class CreateUpFrontDealCall extends ethereum.Call {
  get inputs(): CreateUpFrontDealCall__Inputs {
    return new CreateUpFrontDealCall__Inputs(this)
  }

  get outputs(): CreateUpFrontDealCall__Outputs {
    return new CreateUpFrontDealCall__Outputs(this)
  }
}

export class CreateUpFrontDealCall__Inputs {
  _call: CreateUpFrontDealCall

  constructor(call: CreateUpFrontDealCall) {
    this._call = call
  }

  get _dealData(): CreateUpFrontDealCall_dealDataStruct {
    return changetype<CreateUpFrontDealCall_dealDataStruct>(
      this._call.inputValues[0].value.toTuple(),
    )
  }

  get _dealConfig(): CreateUpFrontDealCall_dealConfigStruct {
    return changetype<CreateUpFrontDealCall_dealConfigStruct>(
      this._call.inputValues[1].value.toTuple(),
    )
  }

  get _nftCollectionRules(): Array<CreateUpFrontDealCall_nftCollectionRulesStruct> {
    return this._call.inputValues[2].value.toTupleArray<CreateUpFrontDealCall_nftCollectionRulesStruct>()
  }

  get _allowListInit(): CreateUpFrontDealCall_allowListInitStruct {
    return changetype<CreateUpFrontDealCall_allowListInitStruct>(
      this._call.inputValues[3].value.toTuple(),
    )
  }

  get _depositUnderlyingAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }
}

export class CreateUpFrontDealCall__Outputs {
  _call: CreateUpFrontDealCall

  constructor(call: CreateUpFrontDealCall) {
    this._call = call
  }

  get upFrontDealAddress(): Address {
    return this._call.outputValues[0].value.toAddress()
  }
}

export class CreateUpFrontDealCall_dealDataStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString()
  }

  get symbol(): string {
    return this[1].toString()
  }

  get purchaseToken(): Address {
    return this[2].toAddress()
  }

  get underlyingDealToken(): Address {
    return this[3].toAddress()
  }

  get holder(): Address {
    return this[4].toAddress()
  }

  get sponsor(): Address {
    return this[5].toAddress()
  }

  get sponsorFee(): BigInt {
    return this[6].toBigInt()
  }
}

export class CreateUpFrontDealCall_dealConfigStruct extends ethereum.Tuple {
  get underlyingDealTokenTotal(): BigInt {
    return this[0].toBigInt()
  }

  get purchaseTokenPerDealToken(): BigInt {
    return this[1].toBigInt()
  }

  get purchaseRaiseMinimum(): BigInt {
    return this[2].toBigInt()
  }

  get purchaseDuration(): BigInt {
    return this[3].toBigInt()
  }

  get vestingPeriod(): BigInt {
    return this[4].toBigInt()
  }

  get vestingCliffPeriod(): BigInt {
    return this[5].toBigInt()
  }

  get allowDeallocation(): boolean {
    return this[6].toBoolean()
  }
}

export class CreateUpFrontDealCall_nftCollectionRulesStruct extends ethereum.Tuple {
  get purchaseAmount(): BigInt {
    return this[0].toBigInt()
  }

  get collectionAddress(): Address {
    return this[1].toAddress()
  }

  get purchaseAmountPerToken(): boolean {
    return this[2].toBoolean()
  }

  get tokenIds(): Array<BigInt> {
    return this[3].toBigIntArray()
  }

  get minTokensEligible(): Array<BigInt> {
    return this[4].toBigIntArray()
  }
}

export class CreateUpFrontDealCall_allowListInitStruct extends ethereum.Tuple {
  get allowListAddresses(): Array<Address> {
    return this[0].toAddressArray()
  }

  get allowListAmounts(): Array<BigInt> {
    return this[1].toBigIntArray()
  }
}
